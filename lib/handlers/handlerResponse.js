/**
 * Created by matan on 1/5/16.
 */
var _ = require('lodash');

/**
 * Creates an objects that bundles an extended response that a handlers can return.
 * This allows the handler to control the returned message properties & headers instead of them being automatically
 * generated by the sender based on the original message.
 * The message must obey rabbitMQ headers, properties & payload rules.
 * @param {string|number|[string]|[number]} body - The message main payload
 * @param {object} headers - An object containing free headers to send.
 * @param {object} properties - An object containing rabbitMQ headers the handler wishes to send.
 * @param {object=} [originalMessage] - If passed take default properties, headers & reply queue from it.
 * In case of an overlap with properties/headers this parameters is WEAKER.
 * @param {string=} [replyTo] - The name of the queue the response should be send to. if passed with originalMessage
 * this parameter is the determining one.
 * @constructor
 */
function HandlerResponse(body, headers, properties, originalMessage, replyTo) {
  this.messageBody = body;

  this.properties = {};
  this.headers = {};
  if (!!originalMessage) {
    this.properties.correlationId = originalMessage.properties.messageId;
    this.headers.topic = !!originalMessage.properties.headers ? originalMessage.properties.headers.topic : '';
    this.replyTo = originalMessage.properties.replyTo;
  }

  // In case of overlapping fields lodash extend gives priority to values from the right side parameter
  _.extend(this.headers, headers);
  _.extend(this.properties, properties);
  if (!!replyTo) {
    this.replyTo = replyTo;
  }
}

HandlerResponse.prototype.getMessageOptions = function () {
  var options = _.extend({}, this.properties);
  options.headers = _.extend({}, this.headers);

  return options;
};

module.exports = HandlerResponse;